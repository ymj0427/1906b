2020.6.28日报
    1、swagger：swagger是实现了openapi规范的工具集，用于生产api文档并提供可视化的restful风格的web服务
        swagger使用
        		1、pom.xml
        			springfox-swagger2
        			springfox-swagger-ui
        		2、config
        			@Configuration
        			@EnableSwagger2
        			public class SwaggerConfig{
        				 @Bean
        				 public Docket getDocket(){....}
        				 private ApiInfo apiInfo(){....}
        			}
        		3、controller、pojo
        			@Api()：描述controller
        			@ApiOperation()：描述方法
        			@ApiImplicitParam()：描述参数
        			@ApiImplicitParams()：描述多个参数
        			@APIModel()：描述对象参数
        			@ApiModelProperty()：描述对象中的属性
    2、网管服务
        路由：所有请求都通过网关访问服务的consumer
            usian-manage-web
                修改vue.config.js： target: 'http://127.0.0.1:7070
                修改src/api/base.js
                     basePrductUrl:"/product_api/backend_item",
                     baseContentUrl:"/content_api/backend_content",
                     baseSearchUrl:"/search_api/frontend_search",
            common_zuul
                application.yml
                    zuul:
                      sensitive-headers: true #全局配置，解决在网关服务中不传递请求头的问题
                      routes:
                        usian-item-web:
                          path: /backend_item/**
                        usian-content-web:
                          path: /backend_content/**
                        usian-search-web:
                          path: /frontend_search/**
            usian-portal-web
                修改 vue.config.js： target: 'http://127.0.0.1:7070',
                修改src/api/base.js
                    baseUrl: '/api/frontend_portal',
                    shopcarBaseUrl: "/shopcar_api/frontend_cart",
                    searchBaseUrl: "/search_api/frontend_search",
                    detailBaseUrl: "/detail_api/frontend_detail",
                    registerBaseUrl: "/register_api/frontend_sso",
                    payMentBaseUrl:"/payment_api/frontend_order",

        容错：客户端通过zuul无法调用consumer时，使用zuul对consumer进行降级
            common_zuul
                com.usian.fallback
                     //设置响应的头信息
                     @Override
                     public HttpHeaders getHeaders() {
                     HttpHeaders header = new HttpHeaders();
                     MediaType mt = new MediaType("application","json", Charset.forName("utf-8"));
                     header.setContentType(mt);
                      return header;
                            }
                      //设置响应体
                       @Override
                       public InputStream getBody() throws IOException {
                            String content = "该服务暂时不可用，请稍后重试";
                            return new ByteArrayInputStream(content.getBytes());
                                 }
        限流：使用令牌桶算法实现zuul对consumer的限流
            common_zuul
                com.usian.filter
                     @Override
                        public Object run() throws ZuulException {
                            //是否能从令牌桶中获取到令牌
                            if (!RATE_LIMIT.tryAcquire()) {
                                RequestContext requestContext =
                                        RequestContext.getCurrentContext();
                                requestContext.setSendZuulResponse(false);
                                requestContext.setResponseBody(JsonUtils.objectToJson(
                                    		Result.error("访问太多频繁，请稍后再访问！！！")));
                                requestContext.getResponse().setContentType("application/json; charset=utf-8");
                            }
                            return null;
                        }
    熔断处理
        降级：通过 Hystrix 对provider做降级处理
            usian_item_feign
                com.usian.feign
                    @FeignClient(value = "usian-item-service",fallbackFactory = ItemServiceFallback.class)
        熔断：通过 Hystrix 对provider做熔断处理
            usian_item_web
                application.yml
                    feign:
                      hystrix:
                        enabled: true #开启降级处理

    网关服务:
        创建common_zuul
        pom:
            spring-cloud-starter-netflix-zuul
        application.yml:
            spring:
              application:
                name: common-zuul
            server:
              port: 7070
            eureka:
              client:
                service-url:
                  defaultZone: http://127.0.0.1:8761/eureka/
            zuul:
              ignored-services: * #忽略的服务,多个可以用*
    网关路由:
        usian-manage-web:
             修改 vue.config.js:
                module.exports = {
                    devServer: {
                        proxy: {
                            '/product_api': {
                                //target: 'http://127.0.0.1:8091',
                                target: 'http://127.0.0.1:7070',
                                pathRewrite: {
                                    '^/product_api': ''
                                },
                                changeOrigin: true
                            },
                            '/content_api': {
                                //target: 'http://127.0.0.1:8093',
                                target: 'http://127.0.0.1:7070',
                                pathRewrite: {
                                    '^/content_api': ''
                                },
                                changeOrigin: true
                            },
                            '/search_api': {
                                //target: 'http://127.0.0.1:8096',
                                target: 'http://127.0.0.1:7070',
                                pathRewrite: {
                                    '^/search_api': ''
                                },
                                changeOrigin: true
                            }
                        },
                        disableHostCheck: true
                    }
                }
             修改src/api/base.js:
                const base = {
                    baseUrl:"/api",
                    basePrductUrl:"/product_api/backend_item",
                    baseContentUrl:"/content_api/backend_content",
                    baseSearchUrl:"/search_api/frontend_search",
                    ... ... ...
                }
        application.yml:
            #第一层 hystrix 超时时间设置
            hystrix:
              command:
                default:
                  execution:
                    isolation:
                      thread:
                        timeoutInMilliseconds: 8000 #默认情况下是线程池隔离，超时时间 1000ms
            #第二层 ribbon 超时时间设置：设置比第一层小
            ribbon:
              ConnectTimeout: 3000 #请求连接的超时时间: 默认 5s
              ReadTimeout: 3000 #请求处理的超时时间: 默认 5s

            zuul:
              routes:
                usian-item-web:
                  path: /backend_item/**
                usian-content-web:
                  path: /backend_content/**
                usian-search-web:
                  path: /frontend_search/**
        usian-portal-web:
            修改 vue.config.js:
                //target: 'http://127.0.0.1:8094',
                target: 'http://127.0.0.1:7070',
            修改src/api/base.js:
                const base = {
                    baseUrl: '/api/frontend_portal',
                    shopcarBaseUrl: "/shopcar_api/frontend_cart",
                    searchBaseUrl: "/search_api/frontend_search",
                    detailBaseUrl: "/detail_api/frontend_detail",
                    registerBaseUrl: "/register_api/frontend_sso",
                    payMentBaseUrl:"/payment_api/frontend_order",
                    ... ... ...
                }
        application.yml
            zuul:
              routes:
                sensitive-headers: true #全局配置，解决在网关服务中不传递请求头的问题
                usian-portal-web:
                  path: /frontend_portal/**
                usian-detail-web:
                  path: /frontend_detail/**
                usian-sso-web:
                  path: /frontend_sso/**
                usian-cart-web:
                  path: /frontend_cart/**
                usian-order-web:
                  path: /frontend_order/**
    网关容错:
         common_zuul:
            fallback:
                @Component
                public class ConsumerFallback implements FallbackProvider {
                    @Override
                    public String getRoute() {
                        //降级的服务名，多个服务return "*"
                        return "*";
                    }

                    /**
                     * 当服务无法执行时，该方法返回托底信息
                     */
                    @Override
                    public ClientHttpResponse fallbackResponse(String route, Throwable cause) {
                        return new ClientHttpResponse() {

                            /**
                             * 设置响应的头信息
                             */
                            @Override
                            public HttpHeaders getHeaders() {
                                HttpHeaders header = new HttpHeaders();
                                httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);
                                return header;
                            }

                            /**
                             * 设置响应体
                             */
                            @Override
                            public InputStream getBody() throws IOException {
                                String content = "该服务暂时不可用，请稍后重试";
                                return new ByteArrayInputStream(content.getBytes());
                            }

                            /**
                             * ClientHttpResponse的fallback的状态码 返回String
                             */
                            @Override
                            public String getStatusText() throws IOException {
                                return this.getStatusCode().getReasonPhrase();
                            }

                            /**
                             * 网关向api服务请求是失败了，但是消费者客户端向网关发起的请求是OK的，
                             * 不应该把api的404,500等问题抛给客户端
                             * 网关和api服务集群对于客户端来说是黑盒子
                             */
                            @Override
                            public HttpStatus getStatusCode() throws IOException {
                                return HttpStatus.OK;
                            }

                            /**
                             * ClientHttpResponse的fallback的状态码 返回int
                             */
                            @Override
                            public int getRawStatusCode() throws IOException {
                                return this.getStatusCode().value();
                            }
                            @Override
                            public void close() {

                            }
                        };
                    }
                }
    网关限流:
        filter:
            /**
             * 限流器
             */
            @Component
            public class RateLimitFilter extends ZuulFilter {
                // 创建令牌桶
                //RateLimiter.create(1)1: 是每秒生成令牌的数量
                // 数值越大代表处理请求量月多，数值越小代表处理请求量越少
                private static final RateLimiter RATE_LIMIT = RateLimiter.create(1);

                @Override
                public String filterType() {
                    return FilterConstants.PRE_TYPE;
                }

                /**
                 * 限流器的优先级应为最高
                 *
                 * @return
                 */
                @Override
                public int filterOrder() {
                    return FilterConstants.SERVLET_DETECTION_FILTER_ORDER;
                }

                @Override
                public boolean shouldFilter() {
                    return true;
                }

                @Override
                public Object run() throws ZuulException {
                    //是否能从令牌桶中获取到令牌
                    if (!RATE_LIMIT.tryAcquire()) {
                        RequestContext requestContext =
                                RequestContext.getCurrentContext();
                        requestContext.setSendZuulResponse(false);
                        requestContext.setResponseBody(JsonUtils.objectToJson(
                            		Result.error("访问太多频繁，请稍后再访问！！！")));
                        requestContext.getResponse().setContentType(
                            			"application/json; charset=utf-8");
                    }
                    return null;
                }
            }